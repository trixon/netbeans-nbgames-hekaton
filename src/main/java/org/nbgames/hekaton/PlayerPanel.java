/* 
 * Copyright 2018 Patrik Karlström.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbgames.hekaton;

import org.nbgames.core.api.Player;

/**
 *
 * @author Patrik Karlström
 */
public class PlayerPanel extends javax.swing.JPanel {

    private final Player mPlayer;
    private int mScoreCurrent;
    private int mScoreLocked;
    private int mThrowsCurrent;
    private int mThrowsTotal;

    /**
     * Creates new form PlayerPanel
     */
    public PlayerPanel(Player player) {
        initComponents();
        nameLabel.setText(player.getName());
        mPlayer = player;
        reset();
    }

    public void incNumOfRolls() {
        mThrowsCurrent++;
        mThrowsTotal++;
        updateIndicators();
    }

    private void updateIndicators() {
        String current = mThrowsCurrent == 0 ? "-" : String.valueOf(mThrowsCurrent);
        String total = mThrowsTotal == 0 ? "-" : String.valueOf(mThrowsTotal);
        statusLabel.setText(String.format("%s/%s", current, total));
    }

    public Player getPlayer() {
        return mPlayer;
    }

    int getScore() {
        return mScoreCurrent;
    }

    void addScore(int score) {
        if (score == 0) {
            mScoreCurrent = 0;
            mScoreLocked = 0;
        } else {
            mScoreCurrent += score;
        }

        textField.setText(String.format("%d (%d)", mScoreCurrent, mScoreLocked));
    }

    void hold() {
        mScoreLocked = mScoreCurrent;
        textField.setText(String.valueOf(mScoreCurrent));
    }

    void setActive(boolean b) {
        indicatorPanel.setOpaque(b);
        mThrowsCurrent = 0;
        updateIndicators();
    }

    void reset() {
        mScoreCurrent = 0;
        mScoreLocked = 0;
        mThrowsCurrent = 0;
        mThrowsTotal = 0;

        updateIndicators();
    }

    void stop(boolean resetToLocked) {
        if (resetToLocked) {
            mScoreCurrent = mScoreLocked;
        }
        textField.setText(String.valueOf(mScoreCurrent));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        textField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        indicatorPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        setLayout(new java.awt.GridBagLayout());

        nameLabel.setFont(nameLabel.getFont().deriveFont((nameLabel.getFont().getStyle() | java.awt.Font.ITALIC) | java.awt.Font.BOLD, nameLabel.getFont().getSize()+6));
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("name"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(nameLabel, gridBagConstraints);

        textField.setEditable(false);
        textField.setFont(textField.getFont().deriveFont(textField.getFont().getStyle() | java.awt.Font.BOLD, textField.getFont().getSize()+8));
        textField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textField.setText("0"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(textField, gridBagConstraints);

        statusLabel.setFont(statusLabel.getFont().deriveFont(statusLabel.getFont().getSize()+4f));
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText("4/37"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        add(statusLabel, gridBagConstraints);

        indicatorPanel.setBackground(new java.awt.Color(255, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        add(indicatorPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel indicatorPanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
}
